[
  {
    "anchor": "java知识点汇总",
    "level": 1,
    "text": "Java知识点汇总"
  },
  {
    "anchor": "java se基础",
    "level": 2,
    "text": "Java SE基础"
  },
  {
    "anchor": "面向对象",
    "level": 3,
    "text": "面向对象"
  },
  {
    "anchor": "什么是面向过程与面向对象",
    "level": 4,
    "text": "什么是面向过程与面向对象"
  },
  {
    "anchor": "面向对象的三个基本特征",
    "level": 4,
    "text": "面向对象的三个基本特征"
  },
  {
    "anchor": "面向对象的五大原则",
    "level": 4,
    "text": "面向对象的五大原则"
  },
  {
    "anchor": "重写与重载",
    "level": 4,
    "text": "重写与重载"
  },
  {
    "anchor": "重载与重写的区别",
    "level": 4,
    "text": "重载与重写的区别"
  },
  {
    "anchor": "重写与重载的条件",
    "level": 4,
    "text": "重写与重载的条件"
  },
  {
    "anchor": "面向对象的复用技术",
    "level": 4,
    "text": "面向对象的复用技术"
  },
  {
    "anchor": "组合的优点",
    "level": 4,
    "text": "组合的优点"
  },
  {
    "anchor": "数据类型",
    "level": 3,
    "text": "数据类型"
  },
  {
    "anchor": "java中的八个基本类型",
    "level": 4,
    "text": "Java中的八个基本类型"
  },
  {
    "anchor": "java 中基本类型的取值范围",
    "level": 4,
    "text": "Java 中基本类型的取值范围"
  },
  {
    "anchor": "java中的参数传递方式",
    "level": 4,
    "text": "Java中的参数传递方式"
  },
  {
    "anchor": "类变量、成员变量和局部变量",
    "level": 4,
    "text": "类变量、成员变量和局部变量"
  },
  {
    "anchor": "java中的基本数据类型和自动装箱",
    "level": 4,
    "text": "Java中的基本数据类型和自动装箱"
  },
  {
    "anchor": "基本数据类型有什么好处",
    "level": 4,
    "text": "基本数据类型有什么好处"
  },
  {
    "anchor": "整型的取值范围",
    "level": 4,
    "text": "整型的取值范围"
  },
  {
    "anchor": "超出范围怎么办",
    "level": 4,
    "text": "超出范围怎么办"
  },
  {
    "anchor": "包装类型",
    "level": 4,
    "text": "包装类型"
  },
  {
    "anchor": "为什么需要包装类",
    "level": 4,
    "text": "为什么需要包装类"
  },
  {
    "anchor": "拆箱与装箱",
    "level": 4,
    "text": "拆箱与装箱"
  },
  {
    "anchor": "哪些地方会自动拆装箱",
    "level": 4,
    "text": "哪些地方会自动拆装箱"
  },
  {
    "anchor": "自动拆装箱带来的问题",
    "level": 4,
    "text": "自动拆装箱带来的问题"
  },
  {
    "anchor": "java中的integer缓存",
    "level": 4,
    "text": "Java中的Integer缓存"
  },
  {
    "anchor": "java中integer的缓存实现",
    "level": 4,
    "text": "Java中Integer的缓存实现"
  },
  {
    "anchor": "integercache class",
    "level": 4,
    "text": "IntegerCache Class"
  },
  {
    "anchor": "java语言规范中的缓存行为",
    "level": 4,
    "text": "Java语言规范中的缓存行为"
  },
  {
    "anchor": "其他缓存的对象",
    "level": 4,
    "text": "其他缓存的对象"
  },
  {
    "anchor": " 和 ， | 和 || 的区别",
    "level": 4,
    "text": "&amp; 和 &amp;&amp;， | 和 || 的区别"
  },
  {
    "anchor": "== 和 equals 有什么区别",
    "level": 4,
    "text": "== 和 equals 有什么区别"
  },
  {
    "anchor": "什么是不可变对象",
    "level": 4,
    "text": "什么是不可变对象"
  },
  {
    "anchor": "final关键字的作用",
    "level": 4,
    "text": "final关键字的作用"
  },
  {
    "anchor": "string str = new string(“abc”); 创建了几个 string 对象？",
    "level": 4,
    "text": "String str = new String(“abc”); 创建了几个 String 对象？"
  },
  {
    "anchor": "hashmap 和 hashtable 的区别？",
    "level": 4,
    "text": "HashMap 和 Hashtable 的区别？"
  },
  {
    "anchor": "java 中创建对象的方式有哪些？",
    "level": 4,
    "text": "Java 中创建对象的方式有哪些？"
  },
  {
    "anchor": "java中的方法覆盖（overriding）和方法重载（overloading）是什么意思",
    "level": 4,
    "text": "Java中的方法覆盖（Overriding）和方法重载（Overloading）是什么意思"
  },
  {
    "anchor": "java中的访问修饰符",
    "level": 4,
    "text": "Java中的访问修饰符"
  },
  {
    "anchor": "java 中 switch 支持什么类型的变量",
    "level": 4,
    "text": "Java 中 switch 支持什么类型的变量"
  },
  {
    "anchor": "集合",
    "level": 3,
    "text": "集合"
  },
  {
    "anchor": "list",
    "level": 4,
    "text": "List"
  },
  {
    "anchor": "set是如何确保元素不重复的",
    "level": 4,
    "text": "Set是如何确保元素不重复的"
  },
  {
    "anchor": "java 中的异常的分类",
    "level": 4,
    "text": "Java 中的异常的分类"
  },
  {
    "anchor": "一个线程运行时发生异常会怎样？",
    "level": 4,
    "text": "一个线程运行时发生异常会怎样？"
  },
  {
    "anchor": "线程",
    "level": 3,
    "text": "线程"
  },
  {
    "anchor": "什么是线程？",
    "level": 4,
    "text": "什么是线程？"
  },
  {
    "anchor": "线程和进程有什么区别？",
    "level": 4,
    "text": "线程和进程有什么区别？"
  },
  {
    "anchor": "什么是临界区和竞态条件",
    "level": 4,
    "text": "什么是临界区和竞态条件"
  },
  {
    "anchor": "什么是线程安全？",
    "level": 4,
    "text": "什么是线程安全？"
  },
  {
    "anchor": "一个线程运行时发生异常会怎样？",
    "level": 4,
    "text": "一个线程运行时发生异常会怎样？"
  },
  {
    "anchor": "如何在两个线程间共享数据？",
    "level": 4,
    "text": "如何在两个线程间共享数据？"
  },
  {
    "anchor": "什么是 futuretask？",
    "level": 4,
    "text": "什么是 FutureTask？"
  },
  {
    "anchor": "什么是线程池？它的优点是什么？",
    "level": 4,
    "text": "什么是线程池？它的优点是什么？"
  },
  {
    "anchor": "如何写代码来解决生产都消费者问题？",
    "level": 4,
    "text": "如何写代码来解决生产都消费者问题？"
  },
  {
    "anchor": "什么是死锁？",
    "level": 4,
    "text": "什么是死锁？"
  },
  {
    "anchor": "java 中 notify 和 notifyall 有什么区别？",
    "level": 4,
    "text": "Java 中 notify 和 notifyAll 有什么区别？"
  },
  {
    "anchor": "为什么 wait()，notify() 和 notifyall() 这些方法在 object 中？",
    "level": 4,
    "text": "为什么 wait()，notify() 和 notifyAll() 这些方法在 Object 中？"
  },
  {
    "anchor": "为什么 wait() 和 notify() 方法要在同步块中调用？",
    "level": 4,
    "text": "为什么 wait() 和 notify() 方法要在同步块中调用？"
  },
  {
    "anchor": "为什么 wait 和 notify 方法要在同步代码块中调用？",
    "level": 4,
    "text": "为什么 wait 和 notify 方法要在同步代码块中调用？"
  },
  {
    "anchor": "线程池",
    "level": 3,
    "text": "线程池"
  },
  {
    "anchor": "什么是线程池",
    "level": 4,
    "text": "什么是线程池"
  },
  {
    "anchor": "使用线程池的好处",
    "level": 4,
    "text": "使用线程池的好处"
  },
  {
    "anchor": "线程池的主要组件",
    "level": 4,
    "text": "线程池的主要组件"
  },
  {
    "anchor": "java 虚拟机",
    "level": 3,
    "text": "Java 虚拟机"
  },
  {
    "anchor": "jvm 的主要组成部分，及其作用？",
    "level": 4,
    "text": "JVM 的主要组成部分，及其作用？"
  },
  {
    "anchor": "java虚拟机运行时的数据区",
    "level": 4,
    "text": "Java虚拟机运行时的数据区"
  },
  {
    "anchor": "说一下堆栈的区别？",
    "level": 4,
    "text": "说一下堆栈的区别？"
  },
  {
    "anchor": "java 中都有哪些引用类型？",
    "level": 4,
    "text": "Java 中都有哪些引用类型？"
  },
  {
    "anchor": "说一下 jvm 有哪些垃圾回收算法？",
    "level": 4,
    "text": "说一下 JVM 有哪些垃圾回收算法？"
  },
  {
    "anchor": "说一下 jvm 有哪些垃圾回收器？",
    "level": 4,
    "text": "说一下 JVM 有哪些垃圾回收器？"
  },
  {
    "anchor": "详细介绍一下 cms 垃圾回收器？",
    "level": 4,
    "text": "详细介绍一下 CMS 垃圾回收器？"
  },
  {
    "anchor": "新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？",
    "level": 4,
    "text": "新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？"
  },
  {
    "anchor": "简述分代垃圾回收器是怎么工作的？",
    "level": 4,
    "text": "简述分代垃圾回收器是怎么工作的？"
  },
  {
    "anchor": "hotspot 虚拟机的方法区在 jdk7 中有何变化，为什么做这些变化？",
    "level": 4,
    "text": "HotSpot 虚拟机的方法区在 JDK7 中有何变化，为什么做这些变化？"
  },
  {
    "anchor": "jdk8 中的元空间",
    "level": 4,
    "text": "JDK8 中的元空间"
  },
  {
    "anchor": "permgen（永久代）",
    "level": 4,
    "text": "PermGen（永久代）"
  },
  {
    "anchor": "堆内存划分",
    "level": 4,
    "text": "堆内存划分"
  },
  {
    "anchor": "简述类加载器的双亲委派模型",
    "level": 4,
    "text": "简述类加载器的双亲委派模型"
  },
  {
    "anchor": "为什么要破坏双亲委派模型？",
    "level": 4,
    "text": "为什么要破坏双亲委派模型？"
  },
  {
    "anchor": "运行时的栈帧的数据结构",
    "level": 4,
    "text": "运行时的栈帧的数据结构"
  },
  {
    "anchor": "局部变量表",
    "level": 4,
    "text": "局部变量表"
  },
  {
    "anchor": "spring",
    "level": 2,
    "text": "Spring"
  },
  {
    "anchor": "spring 基础",
    "level": 3,
    "text": "Spring 基础"
  },
  {
    "anchor": "什么是 ioc",
    "level": 4,
    "text": "什么是 IoC"
  },
  {
    "anchor": "依赖注入有哪几种方式",
    "level": 4,
    "text": "依赖注入有哪几种方式"
  },
  {
    "anchor": "spring支持的几种bean的作用域",
    "level": 4,
    "text": "Spring支持的几种bean的作用域"
  },
  {
    "anchor": "spring框架中的单例beans是线程安全的么？",
    "level": 4,
    "text": "Spring框架中的单例Beans是线程安全的么？"
  },
  {
    "anchor": "spring如何处理线程并发问题？",
    "level": 4,
    "text": "Spring如何处理线程并发问题？"
  },
  {
    "anchor": "spring 事务",
    "level": 3,
    "text": "Spring 事务"
  },
  {
    "anchor": "spring事务的实现方式和实现原理",
    "level": 4,
    "text": "Spring事务的实现方式和实现原理"
  },
  {
    "anchor": "spring事务的种类",
    "level": 4,
    "text": "Spring事务的种类"
  },
  {
    "anchor": "spring 事务的传播行为",
    "level": 4,
    "text": "Spring 事务的传播行为"
  },
  {
    "anchor": "spring 事务的隔离级别",
    "level": 4,
    "text": "Spring 事务的隔离级别"
  },
  {
    "anchor": "spring aop",
    "level": 3,
    "text": "Spring AOP"
  },
  {
    "anchor": "解释一下spring aop里面的几个名词",
    "level": 4,
    "text": "解释一下Spring AOP里面的几个名词"
  },
  {
    "anchor": "spring通知有哪些类型？",
    "level": 4,
    "text": "Spring通知有哪些类型？"
  },
  {
    "anchor": "spring mvc",
    "level": 3,
    "text": "Spring MVC"
  },
  {
    "anchor": "springmvc的流程？",
    "level": 4,
    "text": "SpringMVC的流程？"
  },
  {
    "anchor": "spring boot",
    "level": 3,
    "text": "Spring Boot"
  },
  {
    "anchor": "spring data jpa",
    "level": 3,
    "text": "Spring Data Jpa"
  },
  {
    "anchor": "spring cloud",
    "level": 3,
    "text": "Spring Cloud"
  },
  {
    "anchor": "什么是微服务？",
    "level": 4,
    "text": "什么是微服务？"
  },
  {
    "anchor": "什么是spring cloud？",
    "level": 4,
    "text": "什么是Spring Cloud？"
  },
  {
    "anchor": "spring cloud 如何实现服务的注册和发现？",
    "level": 4,
    "text": "Spring Cloud 如何实现服务的注册和发现？"
  },
  {
    "anchor": "ribbon 和 feign 的区别",
    "level": 4,
    "text": "Ribbon 和 Feign 的区别"
  },
  {
    "anchor": "spring cloud断路器的作用",
    "level": 4,
    "text": "Spring Cloud断路器的作用"
  },
  {
    "anchor": "负载平衡的意义什么？",
    "level": 4,
    "text": "负载平衡的意义什么？"
  },
  {
    "anchor": "什么是spring cloud bus？",
    "level": 4,
    "text": "什么是Spring Cloud Bus？"
  },
  {
    "anchor": "spring cloud和 dubbo 有什么什么区别？",
    "level": 4,
    "text": "Spring Cloud和 Dubbo 有什么什么区别？"
  },
  {
    "anchor": "spring cloud 的组件分别是用来干什么的？",
    "level": 4,
    "text": "Spring Cloud 的组件分别是用来干什么的？"
  },
  {
    "anchor": "持久层框架",
    "level": 2,
    "text": "持久层框架"
  },
  {
    "anchor": "mybatis",
    "level": 3,
    "text": "MyBatis"
  },
  {
    "anchor": "什么是mybatis？",
    "level": 4,
    "text": "什么是Mybatis？"
  },
  {
    "anchor": "mybaits的优点",
    "level": 4,
    "text": "Mybaits的优点"
  },
  {
    "anchor": "mybatis框架的缺点",
    "level": 4,
    "text": "MyBatis框架的缺点"
  },
  {
    "anchor": "mybatis与hibernate有哪些不同？",
    "level": 4,
    "text": "MyBatis与Hibernate有哪些不同？"
  },
  {
    "anchor": "#{} 和 ${} 的区别是什么？",
    "level": 4,
    "text": "#{} 和 ${} 的区别是什么？"
  },
  {
    "anchor": "当实体类中的属性名和表中的字段名不一样 ，怎么办 ？",
    "level": 4,
    "text": "当实体类中的属性名和表中的字段名不一样 ，怎么办 ？"
  },
  {
    "anchor": "mybatis是否支持延迟加载？如果支持，它的实现原理是什么？",
    "level": 4,
    "text": "Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"
  },
  {
    "anchor": "mybatis的一级、二级缓存",
    "level": 4,
    "text": "Mybatis的一级、二级缓存"
  },
  {
    "anchor": "hibernate",
    "level": 3,
    "text": "Hibernate"
  },
  {
    "anchor": "数据库",
    "level": 2,
    "text": "数据库"
  },
  {
    "anchor": "数据库基础",
    "level": 3,
    "text": "数据库基础"
  },
  {
    "anchor": "数据库的三范式是什么？",
    "level": 4,
    "text": "数据库的三范式是什么？"
  },
  {
    "anchor": "什么是主键、外键、超键和候选键",
    "level": 4,
    "text": "什么是主键、外键、超键和候选键"
  },
  {
    "anchor": "什么是存储过程？用什么来调用",
    "level": 4,
    "text": "什么是存储过程？用什么来调用"
  },
  {
    "anchor": "存储过程的优缺点",
    "level": 4,
    "text": "存储过程的优缺点"
  },
  {
    "anchor": "什么是视图和游标",
    "level": 4,
    "text": "什么是视图和游标"
  },
  {
    "anchor": "视图的优缺点",
    "level": 4,
    "text": "视图的优缺点"
  },
  {
    "anchor": "非关系开考数据库和关系型数据库区别，优势比较",
    "level": 4,
    "text": "非关系开考数据库和关系型数据库区别，优势比较"
  },
  {
    "anchor": "什么是内连接、外连接、交叉连接、笛卡尔积",
    "level": 4,
    "text": "什么是内连接、外连接、交叉连接、笛卡尔积"
  },
  {
    "anchor": "sql语言分类",
    "level": 4,
    "text": "SQL语言分类"
  },
  {
    "anchor": "like中 % 和 _ 的区别",
    "level": 4,
    "text": "like中 <code>%</code> 和 <code>_</code> 的区别"
  },
  {
    "anchor": "查询语句不同元素（where、join、limit、group by、having）执行的先后顺序",
    "level": 4,
    "text": "查询语句不同元素（where、join、limit、group by、having）执行的先后顺序"
  },
  {
    "anchor": "from 后面的表关联，是自右向左解析，而 where 条件的解析顺序是自下而上的",
    "level": 4,
    "text": "from 后面的表关联，是自右向左解析，而 where 条件的解析顺序是自下而上的"
  },
  {
    "anchor": "数据库索引",
    "level": 3,
    "text": "数据库索引"
  },
  {
    "anchor": "什么是索引",
    "level": 4,
    "text": "什么是索引"
  },
  {
    "anchor": "索引的优缺点",
    "level": 4,
    "text": "索引的优缺点"
  },
  {
    "anchor": "哪些列适合建立索引、哪些不适合建索引",
    "level": 4,
    "text": "哪些列适合建立索引、哪些不适合建索引"
  },
  {
    "anchor": "什么样的字段适合建索引",
    "level": 4,
    "text": "什么样的字段适合建索引"
  },
  {
    "anchor": "聚集索引（聚合索引）和非聚集索引",
    "level": 4,
    "text": "聚集索引（聚合索引）和非聚集索引"
  },
  {
    "anchor": "数据库事务",
    "level": 3,
    "text": "数据库事务"
  },
  {
    "anchor": "什么是事务",
    "level": 4,
    "text": "什么是事务"
  },
  {
    "anchor": "事务的传播行为",
    "level": 4,
    "text": "事务的传播行为"
  },
  {
    "anchor": "事务的四个特性",
    "level": 4,
    "text": "事务的四个特性"
  },
  {
    "anchor": "事务并发时可能遇到的问题",
    "level": 4,
    "text": "事务并发时可能遇到的问题"
  },
  {
    "anchor": "事务的隔离级别",
    "level": 4,
    "text": "事务的隔离级别"
  },
  {
    "anchor": "什么是嵌套事务",
    "level": 4,
    "text": "什么是嵌套事务"
  },
  {
    "anchor": "如果子事务回滚，会发生什么",
    "level": 4,
    "text": "如果子事务回滚，会发生什么"
  },
  {
    "anchor": "如果父事务回滚，会发生什么",
    "level": 4,
    "text": "如果父事务回滚，会发生什么"
  },
  {
    "anchor": "事务的提交是什么情况",
    "level": 4,
    "text": "事务的提交是什么情况"
  },
  {
    "anchor": "数据库锁",
    "level": 3,
    "text": "数据库锁"
  },
  {
    "anchor": "锁的分类",
    "level": 4,
    "text": "锁的分类"
  },
  {
    "anchor": "mysql都有什么锁，死锁判定原理和具体场景，死锁怎么解决",
    "level": 4,
    "text": "MySQL都有什么锁，死锁判定原理和具体场景，死锁怎么解决"
  },
  {
    "anchor": "什么是死锁",
    "level": 4,
    "text": "什么是死锁"
  },
  {
    "anchor": "悲观锁",
    "level": 4,
    "text": "悲观锁"
  },
  {
    "anchor": "乐观锁（optimistic lock）",
    "level": 4,
    "text": "乐观锁（Optimistic Lock）"
  },
  {
    "anchor": "有哪些锁（悲观锁和乐观锁），select 时怎么加排它锁",
    "level": 4,
    "text": "有哪些锁（悲观锁和乐观锁），select 时怎么加排它锁"
  },
  {
    "anchor": "共享锁与互斥锁",
    "level": 4,
    "text": "共享锁与互斥锁"
  },
  {
    "anchor": "悲观锁的实现",
    "level": 4,
    "text": "悲观锁的实现"
  },
  {
    "anchor": "乐观锁的实现",
    "level": 4,
    "text": "乐观锁的实现"
  },
  {
    "anchor": "数据库优化",
    "level": 3,
    "text": "数据库优化"
  },
  {
    "anchor": "什么是分库分表",
    "level": 4,
    "text": "什么是分库分表"
  },
  {
    "anchor": "什么是分区、分表、分库",
    "level": 4,
    "text": "什么是分区、分表、分库"
  },
  {
    "anchor": "为什么要分库分表",
    "level": 4,
    "text": "为什么要分库分表"
  },
  {
    "anchor": "垂直分库分表",
    "level": 4,
    "text": "垂直分库分表"
  },
  {
    "anchor": "水平分库/分表",
    "level": 4,
    "text": "水平分库/分表"
  },
  {
    "anchor": "分库分表的常用中间件有哪些？",
    "level": 4,
    "text": "分库分表的常用中间件有哪些？"
  },
  {
    "anchor": "mysql",
    "level": 3,
    "text": "MySQL"
  },
  {
    "anchor": "一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？",
    "level": 4,
    "text": "一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 MySQL 数据库，又插入了一条数据，此时 id 是几？"
  },
  {
    "anchor": "如何获取当前数据库版本？",
    "level": 4,
    "text": "如何获取当前数据库版本？"
  },
  {
    "anchor": "char 和 varchar 的区别是什么？",
    "level": 4,
    "text": "char 和 varchar 的区别是什么？"
  },
  {
    "anchor": "float 和 double 的区别是什么？",
    "level": 4,
    "text": "float 和 double 的区别是什么？"
  },
  {
    "anchor": "mysql 的内连接、左连接、右连接有什么区别？",
    "level": 4,
    "text": "MySQL 的内连接、左连接、右连接有什么区别？"
  },
  {
    "anchor": "mysql 索引是怎么实现的？",
    "level": 4,
    "text": "MySQL 索引是怎么实现的？"
  },
  {
    "anchor": "怎么验证 mysql 的索引是否满足需求？",
    "level": 4,
    "text": "怎么验证 MySQL 的索引是否满足需求？"
  },
  {
    "anchor": "说一下 mysql 的行锁和表锁？",
    "level": 4,
    "text": "说一下 MySQL 的行锁和表锁？"
  },
  {
    "anchor": "如何做 mysql 的性能优化？",
    "level": 4,
    "text": "如何做 MySQL 的性能优化？"
  },
  {
    "anchor": "缓存",
    "level": 2,
    "text": "缓存"
  },
  {
    "anchor": "缓存基础",
    "level": 3,
    "text": "缓存基础"
  },
  {
    "anchor": "常见的缓存策略有哪些？",
    "level": 4,
    "text": "常见的缓存策略有哪些？"
  },
  {
    "anchor": "redis 是什么，有哪些功能？",
    "level": 4,
    "text": "Redis 是什么，有哪些功能？"
  },
  {
    "anchor": "redis 和 memcache 有什么区别？",
    "level": 4,
    "text": "Redis 和 memcache 有什么区别？"
  },
  {
    "anchor": "redis 为什么是单线程的？",
    "level": 4,
    "text": "Redis 为什么是单线程的？"
  },
  {
    "anchor": "什么是缓存穿透？怎么解决？",
    "level": 4,
    "text": "什么是缓存穿透？怎么解决？"
  },
  {
    "anchor": "redis 支持的数据类型有哪些？",
    "level": 4,
    "text": "Redis 支持的数据类型有哪些？"
  },
  {
    "anchor": "怎么保证缓存和数据库数据的一致性？",
    "level": 4,
    "text": "怎么保证缓存和数据库数据的一致性？"
  },
  {
    "anchor": "redis 持久化有几种方式？",
    "level": 4,
    "text": "Redis 持久化有几种方式？"
  },
  {
    "anchor": "redis 怎么实现分布式锁？",
    "level": 4,
    "text": "Redis 怎么实现分布式锁？"
  },
  {
    "anchor": "redis 分布式锁有什么缺陷？",
    "level": 4,
    "text": "Redis 分布式锁有什么缺陷？"
  },
  {
    "anchor": "redis 如何做内存优化？",
    "level": 4,
    "text": "Redis 如何做内存优化？"
  },
  {
    "anchor": "redis 淘汰策略有哪些？",
    "level": 4,
    "text": "Redis 淘汰策略有哪些？"
  },
  {
    "anchor": "redis 常见的性能问题有哪些？该如何解决？",
    "level": 4,
    "text": "Redis 常见的性能问题有哪些？该如何解决？"
  },
  {
    "anchor": "redis",
    "level": 3,
    "text": "Redis"
  },
  {
    "anchor": "redis有哪些数据结构？",
    "level": 4,
    "text": "Redis有哪些数据结构？"
  },
  {
    "anchor": "使用过redis分布式锁么，它是什么回事？",
    "level": 4,
    "text": "使用过Redis分布式锁么，它是什么回事？"
  },
  {
    "anchor": "假如redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？",
    "level": 4,
    "text": "假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？"
  },
  {
    "anchor": "使用过 redis 做异步队列么，你是怎么用的？",
    "level": 4,
    "text": "使用过 Redis 做异步队列么，你是怎么用的？"
  },
  {
    "anchor": "如果有大量的key需要设置同一时间过期，一般需要注意什么？",
    "level": 4,
    "text": "如果有大量的key需要设置同一时间过期，一般需要注意什么？"
  },
  {
    "anchor": "redis如何做持久化的？",
    "level": 4,
    "text": "Redis如何做持久化的？"
  },
  {
    "anchor": "pipeline有什么好处，为什么要用 pipeline？",
    "level": 4,
    "text": "Pipeline有什么好处，为什么要用 pipeline？"
  },
  {
    "anchor": "redis的同步机制了解么？",
    "level": 4,
    "text": "Redis的同步机制了解么？"
  },
  {
    "anchor": "是否使用过redis集群，集群的原理是什么？",
    "level": 4,
    "text": "是否使用过Redis集群，集群的原理是什么？"
  },
  {
    "anchor": "分布式",
    "level": 2,
    "text": "分布式"
  },
  {
    "anchor": "分布式基础",
    "level": 3,
    "text": "分布式基础"
  },
  {
    "anchor": "什么是分布式系统？",
    "level": 4,
    "text": "什么是分布式系统？"
  },
  {
    "anchor": "什么是事务？",
    "level": 4,
    "text": "什么是事务？"
  },
  {
    "anchor": "什么是本地事务",
    "level": 4,
    "text": "什么是本地事务"
  },
  {
    "anchor": "什么是分布式事务",
    "level": 4,
    "text": "什么是分布式事务"
  },
  {
    "anchor": "分布式事务有哪些场景？",
    "level": 4,
    "text": "分布式事务有哪些场景？"
  },
  {
    "anchor": "cap理论",
    "level": 4,
    "text": "CAP理论"
  },
  {
    "anchor": "cap的定义",
    "level": 4,
    "text": "CAP的定义"
  },
  {
    "anchor": "cap权衡",
    "level": 4,
    "text": "CAP权衡"
  },
  {
    "anchor": "适合的才是最好的",
    "level": 4,
    "text": "适合的才是最好的"
  },
  {
    "anchor": "消息队列",
    "level": 2,
    "text": "消息队列"
  },
  {
    "anchor": "消息队列基础",
    "level": 3,
    "text": "消息队列基础"
  },
  {
    "anchor": "什么是消息队列",
    "level": 4,
    "text": "什么是消息队列"
  },
  {
    "anchor": "消息队列应用场景",
    "level": 4,
    "text": "消息队列应用场景"
  },
  {
    "anchor": "使用消息队列带来的一些问题",
    "level": 4,
    "text": "使用消息队列带来的一些问题"
  },
  {
    "anchor": "jms vs amqp",
    "level": 4,
    "text": "JMS VS AMQP"
  },
  {
    "anchor": "如何保证消息的可靠性传输（如何处理消息丢失的问题）？",
    "level": 4,
    "text": "如何保证消息的可靠性传输（如何处理消息丢失的问题）？"
  },
  {
    "anchor": "rabbitmq",
    "level": 3,
    "text": "RabbitMQ"
  },
  {
    "anchor": "rabbitmq 中 exchange types 的四种模式",
    "level": 4,
    "text": "RabbitMQ 中 Exchange Types 的四种模式"
  }
]